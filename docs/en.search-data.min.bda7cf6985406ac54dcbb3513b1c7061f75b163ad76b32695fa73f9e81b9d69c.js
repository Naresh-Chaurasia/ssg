'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/hugo/articles/add/','title':"Adding articles",'content':"Adding articles  Open the content/docs folder. Create a new Markdown file.\nThe name of the file will be visible in the URL of the article. Open the new file with a text editor. At the beginning of the file, add the following metadata:  title (string) weight (integer) description (string) optional: other metadata that your site uses    Example:\n--- title: \u0026quot;Content\u0026quot; weight: 20 description: \u0026quot;Short description\u0026quot; customParam: \u0026quot;string\u0026quot; customArrayParam: - \u0026quot;string\u0026quot; - \u0026quot;string\u0026quot; --- After the metadata block, add the Markdown content.  "});index.add({'id':1,'href':'/docs/github/git/','title':"Git basics",'content':"Git basics Installing git  Open the Terminal by pressing CTRL + ALT + T. Check if git is installed by entering git --version Perform one of the following actions:  If the output displays a version number, no further actions are required. If the output say the git command was not found, install git by performing the following actions:  Enter sudo apt install git. If prompted, enter the password. When asked if you want to continue, enter y Result: git is downloaded and installed. Required dependencies are installed automatically.     Set your git credentials by performing the following steps:  Enter git config --global user.email \u0026quot;{your email}\u0026quot; Enter git config --global user.name \u0026quot;{your name}    "});index.add({'id':2,'href':'/docs/hugo/','title':"Hugo",'content':"Hugo Static Site Generator "});index.add({'id':3,'href':'/docs/hugo/install/','title':"Installing Hugo",'content':"Installing Hugo on Ubuntu Hugo offers a few installation methods. The method described in this procedure lets you control the version you are installing and installs it globally.\n Go to the Hugo releases page. Choose a release :  If you are preparing to create a new site, choose the latest release. If you are going to work with an existing site, on the list locate the same release that the site is deployed with.   In the Assets section of the release, locate the installation file for your operating system. Example: hugo_extended_x.y.z_Linux-64bit.tar.gz is compatible with 64-bit Ubuntu. NOTE: The extended version is required if you need to process SCSS or SASS files. Click the file. In the dialog window that opens, select the Save file radio button and click OK. In the file explorer, open the directory where the file was saved. Right-click the downloaded file and select Extract here.\nThe files are extracted to a new directory named after the .tar.gz file, for example hugo_0.69.2_Linux-64bit. Right-click the directory where the files were extracted and select Open in Terminal.\nResult: A Terminal window opens, with the extracted directory set as the working directory. In the Terminal window that opens, enter sudo mv hugo /usr/local/bin Enter your password. To verify that Hugo was installed globally, perform the following actions:  Enter cd ~ Enter hugo version Result: If Hugo was installed successfully, the output lists the version, for example:    marcin@marcin-HP:~$ hugo version Hugo Static Site Generator v0.69.2-EC9DCF30/extended linux/amd64 BuildDate: 2020-04-24T07:57:53Z marcin@marcin-HP:~$ "});index.add({'id':4,'href':'/docs/deploy/prep/','title':"Preparing for GitHub Pages deployment",'content':"Configuring Hugo for GitHub Pages deployment Prerequisites Verify that separate configuration files for production and development are created. See this article\n In the root folder of your repository, open the production configuration file. In the configuration file, search for the publishDir setting. Perform one of the following actions:  If the setting exists, change its value to \u0026quot;docs\u0026quot; If the setting does not exist, create it by adding the following line to the file: publishDir = \u0026quot;docs\u0026quot;   If the relativeURLs value exists and is set to true, set it to false. Add the following line: baseURL = \u0026quot;https://{your GitHub username}.github.io/{repository name}/\nExample: publishDir = \u0026quot;docs\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;Hugo on GitHub Pages\u0026quot; theme = \u0026quot;hugo-book\u0026quot; baseURL = \u0026quot;https://zq-psk.github.io/ssg/\u0026quot;   "});index.add({'id':5,'href':'/docs/deploy/deploy/','title':"Deploying the site",'content':"Site deployment Building the site  In the file explorer, open the root folder of your repository. If the docs folder exists, delete it.\nIMPORTANT: This does not apply to the content/docs/ folder. Right-click Enter hugo\nResult: The static site is built in the docs directory. Commit the changes in the docs directory. Perform one of the following actions:  If you are working on the \u0026ldquo;master\u0026rdquo; branch, push to \u0026ldquo;origin/master\u0026rdquo;. If you are working on another branch, merge the changes into \u0026ldquo;origin/master\u0026rdquo;.    Publishing the site  Log in to GitHub. Open the homepage of the repository. Select the Settings tab. In the menu on the left, ensure that you are in the Options page (open by default). Scroll down to the GitHub Pages section. In the Source drop-down list, select the master branch /docs folder option. Result: Publishing the site from the docs folder on the \u0026ldquo;master\u0026rdquo; branch begins. Depending on the size of the site, this may take some time.\nBy default, the URL of the page is https://{GitHub user name}.github.io{repository name}  "});index.add({'id':6,'href':'/docs/github/','title':"GitHub",'content':"Introduction Assumes the use of Ubuntu.\nGitHub "});index.add({'id':7,'href':'/docs/github/account/','title':"GitHub account",'content':"GitHub account Creating a GitHub account A free GitHub account lets you access the basic features.\n Go to https://github.com/. Fill in the following fields:  Username Email Password   Click Sign up for GitHub. In the page that opens, perform the following actions:  Click Verify.\nA puzzle appears. Solve the puzzle according to the instructions on the screen. Click Join a free plan. Result: A page opens, asking for more information about your work profile.   Optional: Provide the information. Click Complete.\nResult:: GitHub sends a verification email to the address you provided earlier. In the email, click Verify email address. Result: The verification page opens. If prompted, log in to GitHub.\nResult: Your account is verified. In the page that opens, ignore the tutorials by clicking Skip this for now.  Result: Your GitHub account is ready to use.\nAdding an SSH key to GitHub An SSH key is necessary to authorize git requests sent from your local machine to GitHub.\n Open the Terminal by pressing CTRL + ALT + T. Check for existing keys by entering ls -al ~/.ssh Perform one of the following actions:  If the output says that the ~/.ssh directory does not exist, proceed to the next step. If the output lists any .pub files, but you do not want to use any of those keys with GitHub, proceed to the next step. If the output lists any .pub files and you want to use one of those keys with GitHub, skip to step X.   Generate a new key by performing the following actions:  Enter $ ssh-keygen -t rsa -b 4096 -C \u0026quot;{your_email@example.com}\u0026quot;\nwhere {your_email@example.com} is the email address you used to create your GitHub account. When prompted to enter the file in which to save the key, perform one of the following actions:  To accept the default location, press ENTER. To change the location, enter the new location.   When prompted to enter a passphrase, perform one of the following actions:  To use a passphrase, enter and repeat the passphrase. To save the key without a passphrase, press ENTER. Result: The key is saved to a file.     Add your private key to the ssh-agent by performing the following actions:  Enter eval \u0026quot;$(ssh-agent -s)\u0026quot;\nResult: The ssh-agent starts running in the background. Enter ssh-add {path to private key file}\nTIP: The default path is ~/.ssh/id_rsa Example: ssh-add ~/.ssh/id_rsa If prompted, enter the passphrase.   Copy the SSH key to the clipboard by performing the following actions:  Enter gedit \u0026lt;path to public key file\u0026gt;\nTIP: The default path is ~/.ssh/id_rsa.pub From the text editor window that opens, copy all the contents into the clipboard. Close the text editor.   Log in to GitHub. Go to the profile settings page. In the menu on the left, click SSH and GPG keys. In the upper-right corner, click New SSH key. In the Title field, enter a meaningful name for the key.\nExample: John's personal laptop In the Key field, paste the public SSH key. Click Add SSH key. Enter your GitHub password. Result: The system is authorized to perform git operations on your GitHub account.  "});index.add({'id':8,'href':'/docs/hugo/initialize/','title':"Initializing a site",'content':"Initializing a site  Open the Terminal by pressing CTRL + ALT + T. Navigate to the parent directory of your repository.\nExample  marcin@marcin-HP:~$ cd Documents/gitRepositories Verify that the repository catalog exists.\nExample  marcin@marcin-HP:~/Documents/gitRepositories$ ls myRepository  Enter hugo new site {repository dir}\nExample: hugo new site myRepository Result: An empty site is created. To serve the site on your machine, perform the following steps:  Enter cd {repository dir} Enter hugo server Result: By default, the site is available at http://localhost:1313/. Initially, the site has no content and you can only see a blank page. If another site is running locally under port 1313, Hugo automatically selects a different port. You can find the current address in the output of the hugo server command:    ... Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:45353/ (bind address 127.0.0.1) Press Ctrl+C to stop ... 3. Return to the Terminal window and stop the site by pressing **`CTRL` + `C`**. "});index.add({'id':9,'href':'/docs/deploy/','title':"GitHub Pages",'content':"GitHub Pages If you are using a free account, this feature is only available for public repositories.\n"});index.add({'id':10,'href':'/docs/hugo/themes/','title':"Themes",'content':"Themes Adding a theme To give your website a layout, you must add a theme. The procedure explains how to download a theme and make it a part of your repository, so you can make modifications without affecting the original theme.\n Go to the Hugo themes site. Browse the list of themes.\nThis page uses the book theme. Go the GitHub page of the theme\u0026rsquo;s repository. Click Clone or download. Click Download ZIP. Save the file to your local drive. Extract the files. In your repository, in the themes/ folder, create a folder named after the theme. Copy the extracted files into the theme folder. In the root folder of the repository, open the config.toml file. In the configuration file, add the following line:  theme = \u0026quot;{theme name} Example:\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot; theme = \u0026quot;book\u0026quot; Verify that the theme was added successfully:  Open the Terminal by pressing CTRL + ALT + T. Navigate to your repository.\nExample: cd Documents/myRepository Enter hugo server.\nResult: Your page is available locally as an empty site with no content. Some elements of the theme should be visible.    "});index.add({'id':11,'href':'/docs/hugo/articles/','title':"Content",'content':"Content Hugo accepts a number of content formats. The content of this site is written in Markdown.\nMarkdown Markdown is a lightweight markup language. It is easy to learn and easy to use, but its capabilities are limited.\nYou can learn Markdown from this tutorial from GitHub.\nHugo uses an interpreter compliant with the same Markdown flavor that GitHub uses.\nContent organization The easiest way to organize content in Hugo is by manipulating the directory structure and the weight metadata of articles.\nDirectory structure By default, content is stored in the content folder in your repository. Themes may require various layouts for the files in that folder. For example, the \u0026ldquo;book\u0026rdquo; theme, used to generate this site, by default requires the content to be placed in the content/docs folder.\nWhen you add content files, their position in the directory structure affects their kind and position in the table of contents.\nThis example shows a part of this site\u0026rsquo;s directory structure:\n. └── content └── docs └── hugo _index.md initialize.md install.md themes.md articles └── _index.md //this is the article you are reading now add.md review.md _gfx └── tocExample.png └── github ... ... In the content/docs/hugo/articles folder, the _index.md file is the main article of the section. In the table of contents, it is the \u0026ldquo;parent\u0026rdquo; of the other articles inside the folder.\nIn the Hugo documentation, this is called a page bundle.\nNOTE: the index file must be named _index.md, including the underscore. Without the underscore, the page becomes a leaf bundle. Leaf bundles are not used for creating this site.\nPage bundles can be used to create logical structures and store additional resources, such as images, closer to the content where they are used.\nIn the folder structure mentioned earlier, the article you are reading now is a part of another page bundle. The index page of the larger page bundle is this article.\nFor more details, see the Hugo documentaiton.\nArticle weight The weight metadata is explained here.\nArticle metadata The metadata is a block of YAML-formatted data at the beginning of a Markdown file. The example shows the first lines of this article\u0026rsquo;s source file:\n--- title: \u0026quot;Content\u0026quot; weight: 20 description: \u0026quot;Learn to manage content structures in Hugo\u0026quot; --- # Content Hugo accepts a number of content formats. The content of this site is written in Markdown. The two main purposes of metadata are:\n Providing information to Hugo when generating a site. Providing information to search engines.  Hugo does not treat any metadata as obligatory. Omitting the metadata entirely does not cause a build error. However, it is good practice to add at least a title and a description.\nYou can add custom metadata:\n--- title: \u0026quot;Content\u0026quot; weight: 20 description: \u0026quot;Short description\u0026quot; customParam: \u0026quot;string\u0026quot; customArrayParam: - \u0026quot;string\u0026quot; - \u0026quot;string\u0026quot; --- This can be useful for creating custom shortcodes and partials. For example, you can create a shortcode that uses metadata to build complex relationship maps between articles.\nTitle Visible in the table of contents, the title of the browser tab, and the search engine.\nDescription Visible in the search engine and some tables of contents, depending on the theme.\nWeight Used to arrange the order of articles in the table of contents. Articles with the lowest weight are displayed first.\nWeight works in the scope of a single section and does not affect sub-sections.\nExample:\nIn the table of contents in the screenshot, the weight of \u0026ldquo;Initializing a site\u0026rdquo;:\n does not interact in any way with the weight of \u0026ldquo;Adding content\u0026rdquo; or \u0026ldquo;GitHub account\u0026rdquo;. interacts with the weight of \u0026ldquo;Installing Hugo\u0026rdquo;, \u0026ldquo;Themes\u0026rdquo;, and \u0026ldquo;Content\u0026rdquo;.  TIP: When adding weight to articles, do not increment the value by 1. Use a larger value, such as 5 or 10. Thanks to this, when you add an article in the future, you will not need to modify the weight of other articles in the section.\nExample.\n \u0026ldquo;Article A\u0026rdquo; has a weight of 5. \u0026ldquo;Article B\u0026rdquo; has a weight of 10. A month later, \u0026ldquo;Article C\u0026rdquo; is added. The weight is set to 8.  In result, \u0026ldquo;Article C\u0026rdquo; is placed in the table of contents between A and B without any further modifications.\nIf A had a weight of 1 and B had a weight of 2, you would have to change the weight of B to 3. In a structure with more articles, this would generate unnecessary workload.\n"});index.add({'id':12,'href':'/docs/vscodium/','title':"VS Codium",'content':"VS Codium "});index.add({'id':13,'href':'/docs/hugo/config/','title':"Hugo configuration files",'content':"Hugo configuration files If you modified your config.toml file to meet the requirements of GitHub Pages, the localhost preview may no longer work. To resolve this, you can create separate configuration files for production and for development.\nBy default, the hugo command uses the production configuration, and hugo server uses the development configuration.\nCreating separate configuration files for development and production  In the file explorer, open the root folder of your repository.   "});index.add({'id':14,'href':'/docs/','title':"Docs",'content':""});index.add({'id':15,'href':'/docs/github/repository/','title':"GitHub repository",'content':"GitHub repository Creating a repository  Log in to GitHub. In the menu on the left, click New. In the Repository name field, enter a meaningful name.\nNOTE: If you host a project site from this repository, the name is part of the URL. Optional: In the Description field, enter a description. Make the repository public or private by selecting the corresponding radio button. Click Create repository.\nResult An empty repository is created. Open the Terminal by pressing CTRL + ALT + T. Navigate to the directory where you want to store the git repository. Example:  marcin@marcin-HP:~$ cd Documents/gitRepositories Enter git clone git@github.com:{your GitHub username}/{your repository name}.git If prompted to add github.com to the list of known hosts, enter yes Result The repository is cloned into a new directory, named after the repository. You can now commit files from this location to GitHub.  "});index.add({'id':16,'href':'/docs/hugo/articles/review/','title':"Reviewing the output",'content':"Reviewing the output Before publishing your site to GitHub Pages, you should review the output locally. GitHub Pages do not provide an on-line staging environment and the static site pushed to \u0026ldquo;origin/master\u0026rdquo; is published immediately.\nHosting the preview  Open the Terminal by pressing CTRL + ALT + T. Navigate to the root folder of your repository. Enter hugo server.\nResult: The site is hosted locally on your system. By default, the site is available at http://localhost:1313/.\nIf another site is running locally under port 1313, Hugo automatically selects a different port. You can find the current address in the output of the hugo server command: Web Server is available at http://localhost:45353/ (bind address 127.0.0.1)   Review considerations Markdown requires precise application of spaces and line breaks.\nWhen reviewing content, pay special attention to:\n code block formatting. list numbering issues. line breaks. line spacing (may be broken due to redundant line breaks)  The live preview served at localhost helps you to make corrections faster, but is not perfect.\nIf you make a change that should fix a problem and the output is still wrong, try restarting the preview.\n"});index.add({'id':17,'href':'/docs/vscodium/vsc/','title':"VS Codium",'content':"VS Codium Installing VS Codium on Ubuntu  Open the Ubuntu Software application.\nBy default, the application is available from the application bar on the left side of the screen. In the upper-left corner of the application window, click the search icon. In the search field that opens, enter VS Codium In the results, click VS Codium. In the application details that open, click Install. In the pop-up that opens, enter your user password and press ENTER. Result The application is downloaded and installed.  "});})();