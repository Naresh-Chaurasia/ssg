'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'zq-psk.github.io/ssg/docs/hugo/hugo/','title':"Hugo",'content':"Hugo Static Site Generator Installing Hugo on Ubuntu Hugo offers a few installation methods. The method described in this procedure lets you control the version you are installing and installs it globally.\n Go to the Hugo releases page. Choose a release :  If you are preparing to create a new site, choose the latest release. If you are going to work with an existing site, on the list locate the same release that the site is deployed with.   In the Assets section of the release, locate the installation file for your operating system. Example: hugo_extended_x.y.z_Linux-64bit.tar.gz is compatible with 64-bit Ubuntu. NOTE: The extended version is required if you need to process SCSS or SASS files. Click the file. In the dialog window that opens, select the Save file radio button and click OK. In the file explorer, open the directory where the file was saved. Right-click the downloaded file and select Extract here.\nThe files are extracted to a new directory named after the .tar.gz file, for example hugo_0.69.2_Linux-64bit. Right-click the directory where the files were extracted and select Open in Terminal.\nResult: A Terminal window opens, with the extracted directory set as the working directory. In the Terminal window that opens, enter sudo mv hugo /usr/local/bin Enter your password. To verify that Hugo was installed globally, perform the following actions:  Enter cd ~ Enter hugo version Result: If Hugo was installed successfully, the output lists the version, for example:    marcin@marcin-HP:~$ hugo version Hugo Static Site Generator v0.69.2-EC9DCF30/extended linux/amd64 BuildDate: 2020-04-24T07:57:53Z marcin@marcin-HP:~$ Initializing a site  Open the Terminal by pressing CTRL + SHIFT + T. Navigate to the parent directory of your repository.\nExample  marcin@marcin-HP:~$ cd Documents/gitRepositories Verify that the repository catalog exists.\nExample  marcin@marcin-HP:~/Documents/gitRepositories$ ls myRepository  Enter hugo new site {repository dir}\nExample: hugo new site myRepository Result: An empty site is created. To serve the site on your machine, perform the following steps:  Enter cd {repository dir} Enter hugo server Result: By default, the site is available at http://localhost:1313/. Initially, the site has no content and you can only see a blank page. If another site is running locally under port 1313, Hugo automatically selects a different port. You can find the current address in the output of the hugo server command:    ... Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:45353/ (bind address 127.0.0.1) Press Ctrl+C to stop ... 3. Return to the Terminal window and stop the site by pressing **`CTRL` + `C`**.  Adding a theme To give your website a layout, you must add a theme. The procedure explains how to download a theme and make it a part of your repository, so you can make modifications without affecting the original theme.\n Go to the Hugo themes site. Browse the list of themes.\nThis page uses the book theme. Go the GitHub page of the theme\u0026rsquo;s repository. Click Clone or download. Click Download ZIP. Save the file to your local drive. Extract the files. In your repository, in the themes/ folder, create a folder named after the theme. Copy the extracted files into the theme folder. In the root folder of the repository, open the config.toml file. In the configuration file, add the following line:  theme = \u0026quot;{theme name} Example:\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot; theme = \u0026quot;book\u0026quot; Verify that the theme was added successfully:  Open the Terminal by pressing CTRL + SHIFT + T. Navigate to your repository.\nExample: cd Documents/myRepository Enter hugo server.\nResult: Your page is available locally as an empty site with no content. Some elements of the theme should be visible.    Adding content "});index.add({'id':1,'href':'zq-psk.github.io/ssg/docs/deploy/prep/','title':"Preparing for GitHub Pages deployment",'content':"Configuring Hugo for GitHub Pages deployment  In the root folder of your repository, open the config.toml file. In the configuration file, search for the publishDir setting. Perform one of the following actions:  If the setting exists, change its value to \u0026quot;docs\u0026quot; If the setting does not exist, create it by adding the following line to the file: publishDir = \u0026quot;docs\u0026quot;   Change the value of baseURL to the URL of your page.\nBy default, the URL is {your username}.github.io/{repository name}. IMPORTANT: This setting also affects the URL of the local page published by the hugo server command. Example: baseURL = \u0026quot;zq-psk.github.io/ssg/\u0026quot; publishDir = \u0026quot;docs\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;Marcin Misiak - writing samples\u0026quot; theme = \u0026quot;book\u0026quot;   "});index.add({'id':2,'href':'zq-psk.github.io/ssg/docs/deploy/deploy/','title':"Deploying the site",'content':"Site deployment Building the site Prerequisites Check out the \u0026ldquo;master\u0026rdquo; branch.\nProcedure  Open the Terminal by pressing CTRL + SHIFT + T. Navigate to the root folder of the repository. Enter hugo\nResult: The static site is built in the docs directory. In the file explorer, open the docs directory. Double click index.html.\nResult: The site opens in the browser. Verify that the content was generated properly. Commit the changes in the docs directory. Push to the \u0026ldquo;origin/master\u0026rdquo; branch. First deployment only: Enable GitHub Pages by performing the following actions:  On GitHub, open the homepage of the repository. Select the Settings tab. On the Settings tab, scroll down to the GitHub Pages0 section. In the Source drop-down list, select the master branch /docs folder option.    "});index.add({'id':3,'href':'zq-psk.github.io/ssg/docs/github/','title':"Github",'content':"Introduction Assumes the use of Ubuntu.\nGitHub Creating a GitHub account A free GitHub account lets you access the basic features.\n Go to https://github.com/. Fill in the following fields:  Username Email Password   Click Sign up for GitHub. In the page that opens, perform the following actions:  Click Verify.\nA puzzle appears. Solve the puzzle according to the instructions on the screen. Click Join a free plan. Result: A page opens, asking for more information about your work profile.   Optional: Provide the information. Click Complete.\nResult:: GitHub sends a verification email to the address you provided earlier. In the email, click Verify email address. Result: The verification page opens. If prompted, log in to GitHub.\nResult: Your account is verified. In the page that opens, ignore the tutorials by clicking Skip this for now.  Result: Your GitHub account is ready to use.\nAdding an SSH key to GitHub An SSH key is necessary to authorize git requests sent from your local machine to GitHub.\n Open the Terminal by pressing CTRL + SHIFT + T. Check for existing keys by entering ls -al ~/.ssh Perform one of the following actions:  If the output says that the ~/.ssh directory does not exist, proceed to the next step. If the output lists any .pub files, but you do not want to use any of those keys with GitHub, proceed to the next step. If the output lists any .pub files and you want to use one of those keys with GitHub, skip to step X.   Generate a new key by performing the following actions:  Enter $ ssh-keygen -t rsa -b 4096 -C \u0026quot;{your_email@example.com}\u0026quot;\nwhere {your_email@example.com} is the email address you used to create your GitHub account. When prompted to enter the file in which to save the key, perform one of the following actions:  To accept the default location, press ENTER. To change the location, enter the new location.   When prompted to enter a passphrase, perform one of the following actions:  To use a passphrase, enter and repeat the passphrase. To save the key without a passphrase, press ENTER. Result: The key is saved to a file.     Add your private key to the ssh-agent by performing the following actions:  Enter eval \u0026quot;$(ssh-agent -s)\u0026quot;\nResult: The ssh-agent starts running in the background. Enter ssh-add {path to private key file}\nTIP: The default path is ~/.ssh/id_rsa Example: ssh-add ~/.ssh/id_rsa If prompted, enter the passphrase.   Copy the SSH key to the clipboard by performing the following actions:  Enter gedit \u0026lt;path to public key file\u0026gt;\nTIP: The default path is ~/.ssh/id_rsa.pub From the text editor window that opens, copy all the contents into the clipboard. Close the text editor.   Log in to GitHub. Go to the profile settings page. In the menu on the left, click SSH and GPG keys. In the upper-right corner, click New SSH key. In the Title field, enter a meaningful name for the key.\nExample: John's personal laptop In the Key field, paste the public SSH key. Click Add SSH key. Enter your GitHub password. Result: The system is authorized to perform git operations on your GitHub account.  Installing git  Open the Terminal by pressing CTRL + SHIFT + T. Check if git is installed by entering git --version Perform one of the following actions:  If the output displays a version number, no further actions are required. If the output say the git command was not found, install git by performing the following actions:  Enter sudo apt install git. If prompted, enter the password. When asked if you want to continue, enter y Result: git is downloaded and installed. Required dependencies are installed automatically.     Set your git credentials by performing the following steps:  Enter git config --global user.email \u0026quot;{your email}\u0026quot; Enter git config --global user.name \u0026quot;{your name}    Creating a repository  Log in to GitHub. In the menu on the left, click New. In the Repository name field, enter a meaningful name.\nNOTE: If you host a project site from this repository, the name is part of the URL. Optional: In the Description field, enter a description. Make the repository public or private by selecting the corresponding radio button. Click Create repository.\nResult An empty repository is created. Open the Terminal by pressing CTRL + SHIFT + T. Navigate to the directory where you want to store the git repository. Example:  marcin@marcin-HP:~$ cd Documents/gitRepositories Enter git clone git@github.com:{your GitHub username}/{your repository name}.git If prompted to add github.com to the list of known hosts, enter yes Result The repository is cloned into a new directory, named after the repository. You can now commit files from this location to GitHub.  "});index.add({'id':4,'href':'zq-psk.github.io/ssg/docs/vscodium/vsc/','title':"Vsc",'content':"VS Codium Installing VS Codium on Ubuntu  Open the Ubuntu Software application.\nBy default, the application is available from the application bar on the left side of the screen. In the upper-left corner of the application window, click the search icon. In the search field that opens, enter VS Codium In the results, click VS Codium. In the application details that open, click Install. In the pop-up that opens, enter your user password and press ENTER. Result The application is downloaded and installed.  "});index.add({'id':5,'href':'zq-psk.github.io/ssg/docs/','title':"Docs",'content':""});index.add({'id':6,'href':'zq-psk.github.io/ssg/docs/deploy/','title':"GitHub Pages",'content':"GitHub Pages If you are using a free account, this feature is only available for public repositories.\n"});})();