'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/hugo/articles/add/','title':"Adding articles",'content':"Adding articles  In the project folder, open the content folder.\nBy default, the folder is content. The \u0026ldquo;book\u0026rdquo; theme uses the content/docs folder. Create a new Markdown file in the location where you want to add an article.\nFor more information on content organization, read this article. Open the new file with a text editor. At the beginning of the file, add the following metadata:  title (string) weight (integer) description (string) optional: other metadata that your site uses    Example:\n--- title: \u0026quot;Content\u0026quot; weight: 20 description: \u0026quot;Short description\u0026quot; customParam: \u0026quot;string\u0026quot; customArrayParam: - \u0026quot;string\u0026quot; - \u0026quot;string\u0026quot; --- After the metadata block, add the Markdown content. Save the file. Verify that the output is correct.\nSee Reviewing the output.  "});index.add({'id':1,'href':'/docs/github/git/','title':"Git basics",'content':"Git basics What is Git? Git is a distributed version control system. It is free, open source, and popular with software developers worldwide.\nGit stores information about incremental changes, which means you can see and compare how a file changed over a long period of time, and control what is included in the production environment.\nGit is a powerful and complex tool. This article covers only the most basic concepts needed to perform simple operations within your own repository. If you want to use Git on a regular basis or in a professional environment, you should complete a more comprehensive tutorial.\nGit glossary Here are the explanations of the basic terms you need to know to understand Git.\nRepository A repository is the central element of a Git-controlled project. It stores all the data: files, branches, history, and so on.\nBranch By default, a repository only includes a master branch which stores the files released into production. When you\u0026rsquo;re working on a personal project and learning to use Git, you do not need to create any other branches.\nAdditional branches (in this guide, they are called working branches, but the nomenclature differs depending on the applied work methodology) may be created from the master branch (or other working branches) at any time to work on different features of a project. Development work can be in progress on many branches at the same time.\nWhen the work is complete, the commits from the branch are merged into the master branch.\nYou can create local branches and never push them to origin. This can be useful for testing purposes.\nOrigin The origin branches are the branches stored in the original remote repository (in the case of this site, the remote repository is stored in the GitHub cloud service).\nLocal When you want to work on a your computer, you create a local counterpart of an origin branch. Changes made on local branches must be pushed to the origin counterparts of those branches. If you do not do that, the changes remain visible only on your hard drive.\nIt is also possible to create a local branch first and then push it to the remote repository, creating an origin branch in the process.\nCloning The operation that downloads a repository from the cloud to your local drive so you can work with the files on your own computer before pushing them to origin.\nCheckout When you check out a branch, you set it as your current working branch.\nChecking out can also be used to create a new local branch.\nCommit A commit can be understood as saving your work to the branch you are currently working on (most of the time, it is a local branch). As the name implies, you are making a commitment, informing Git that the changes are final.\nCancelling a commit is much more difficult than reverting the changes in a text editor.\nWhen committing, you can choose some of the files you modified, or add all of them to the commit.\nCommits can be made with a message. It is good practice to add meaningful, short commit messages.\nYou can make a series of commits locally before pushing your work to the cloud.\nStaged changes Staged changes are changes that are included in the commit at the time the commit is made. You can add all changes to a commit or pick only some of them.\nChanges are added on a file-by-file basis. You cannot stage only a part of the changes made to a particular file.\nPush Pushing means uploading the commits from your local branch to its origin counterpart.\nWhen you push a branch that does not have an origin counterpart, you can create the counterpart in the process.\nPull Pulling means downloading the changes from the origin branch to its local counterpart. This is done to keep a branch up-to-date if commits were made to the branch from another system since you cloned it to your local drive. The changes could be made by another contributor or by you, from another computer.\nMerge A merge transfers the commits form one branch to another. Merges are usually done into the master branch, but you can also merge working branches into one another.\nAnother common use is merging the master branch into the working branch in order to keep the working branch up-to-date with the latest production changes.\nPull request When you want to merge the changes from a source branch (the working branch) into a target branch (usually master), you can do it by creating a pull request.\nA pull request lets you compare the changes that will be introduced into the target branch when merging. It may be configured so that it requires a review and acceptance from someone. After a pull request is made, you can still work on the files on the source branch and make changes according to comments made in the pull request.\nRepositories are often configure so that a pull request is the only way to introduce changes to the master branch.\nGit workflow example A simple example of how Git may be used:\n Marcin clones a repository to his local drive. He creates a new branch locally or checks out an existing branch. He makes changes to some files. He stages the changes. He commits the changes the the local branch. He pushes the commits to the origin branch. Using the GitHub GUI, he creates a pull request. Marcin\u0026rsquo;s teammates review the pull request and submit their approvals. Marcin accepts the pull request and the changes are merged into the master branch. The content of the master branch is published to production, making it available to the clients. Marcin deletes the working branch from local and origin. When he wants to introduce more changes, Marcin creates a new branch for that work.  Git GUIs Git can be used entirely from the Terminal, but to make your work easier, you can use GUIs such as SourceTree or text editor plugins.\nNote: To use the GUIs effectively, you must understand the basic concepts of Git first, even if you plan to never use Git in the Terminal.\nInstalling Git Before you can start using Git, you need to install it in your system.\n Open the Terminal by pressing CTRL + ALT + T. Check if git is installed by entering git --version Perform one of the following actions:  If the output displays a version number, no further actions are required. If the output say the git command was not found, install Git by performing the following actions:  Enter sudo apt install git. If prompted, enter the password. When asked if you want to continue, enter y Result: Git is downloaded and installed. Required dependencies are installed automatically.     Set your Git credentials by performing the following steps:  Enter git config --global user.email \u0026quot;{your email}\u0026quot; Enter git config --global user.name \u0026quot;{your name}\u0026quot;    "});index.add({'id':2,'href':'/docs/hugo/','title':"Hugo",'content':"Hugo Static Site Generator What is Hugo? Hugo is a free and open-source static site generator.\nIt allows for wide customization without any plugins and enables the use of templates to automate your work and content management.\nThis website is built entirely with Hugo.\nHugo templating Hugo templates are based on the Golang programming language and make use of programming concepts such as IF statements or loops.\nTemplates can be used in partials and shortcodes. A template may be simple, such as encasing a piece of text in a \u0026lt;div\u0026gt; HTML tag for styling. More complex templates can be used to build tables of contents or complex relationship maps, similar in functionality to DITA reltables.\nThis guide does not currently cover instructions on creating custom templates.\nPartials Partials are templates used in page layouts. The menus on the left and right of this site are created using the built-in partials offered by the book theme.\nShortcodes Shortcodes are templates used to insert additional elements into the content. They are used in the content source and can be used, for example, to create colored notes or warnings without typing raw HTML into the source.\n"});index.add({'id':3,'href':'/docs/hugo/install/','title':"Installation",'content':"Hugo Installation Hugo offers a few installation methods. A complete list is available in the Hugo documentation.\nInstalling Hugo on Ubuntu This method requires the most manual work, but it gives you strict control over the installed version. This is beneficial if you want to update Hugo at your own pace, giving yourself time to resolve any issues caused by the introduction of features that break backwards compatibility.\n Go to the Hugo releases page. Choose a release :  If you are preparing to create a new site, choose the latest release. If you are going to work with an existing site, on the list locate the same release that the site is deployed with.   In the Assets section of the release, locate the installation file for your operating system. Example: hugo_extended_x.y.z_Linux-64bit.tar.gz is compatible with 64-bit Ubuntu. NOTE: The extended version is required if you need to process SCSS or SASS files. Most themes require this feature. Click the file. In the dialog window that opens, select the Save file radio button and click OK. In the file explorer, open the directory where the file was saved. Right-click the downloaded file and select Extract here.\nThe files are extracted to a new directory named after the .tar.gz file, for example hugo_0.69.2_Linux-64bit. Right-click the directory where the files were extracted and select Open in Terminal.\nResult: A Terminal window opens, with the extracted directory set as the working directory. In the Terminal window that opens, enter sudo mv hugo /usr/local/bin If prompted, enter your password.\nResult: The Hugo application is moved into a location that makes it accessible system-wide. To verify that Hugo was installed globally, perform the following actions:  Enter cd ~ Enter hugo version\nResult: If Hugo was installed successfully, the output lists the version, for example:  marcin@marcin-HP:~$ hugo version Hugo Static Site Generator v0.69.2-EC9DCF30/extended linux/amd64 BuildDate: 2020-04-24T07:57:53Z marcin@marcin-HP:~$   "});index.add({'id':4,'href':'/docs/deploy/prep/','title':"Preparing for GitHub Pages deployment",'content':"Configuring Hugo for GitHub Pages deployment GitHub Pages requires some initial configuration from the static site generator.\n In the project folder, open the config.toml file. In the configuration file, search for the publishDir setting. Perform one of the following actions:  If the setting exists, change its value to \u0026quot;docs\u0026quot; If the setting does not exist, create it by adding the following line to the file: publishDir = \u0026quot;docs\u0026quot;   If the relativeURLs key exists and is set to true, set it to false. Add the following key-value pair: canonifyURLs = true Add the following key-value pair: baseURL = \u0026quot;https://{your GitHub username}.github.io/{repository name}/\nExample: publishDir = \u0026quot;docs\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;Hugo on GitHub Pages\u0026quot; theme = \u0026quot;hugo-book\u0026quot; canonifyURLs = true baseURL = \u0026quot;https://zq-psk.github.io/ssg/\u0026quot;   Result: The page is configured for GitHub pages deployment.\nIMPORTANT: The configuration file affects the local URL when using the hugo server command. The localhost URL is shown in the output of the command:\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ssg/ (bind address 127.0.0.1) Press Ctrl+C to stop "});index.add({'id':5,'href':'/docs/hugo/articles/enrich/','title':"Content enrichment",'content':"Content enrichment You can enrich your content by using shortcodes or inserting HTML into the Markdown file.\nShortcodes Hugo offers a number of built-in shortcodes. Themes usually add additional shortcodes you can use. You can also create your own.\nShortcodes are processed when the Markdown sources are parsed into HTML.\nA full list of the built-in shortcodes is available in the Hugo documentation.\nThe shortcodes added by a theme are usually described in the theme\u0026rsquo;s README.md file.\nUsing shortcodes  Open a Markdown file. Insert a shortcode.\nNOTE: The example is provided as a screenshot, because a shortcode cannot be included as a code snippet without creating another shortcode to make this possible.\nExample: the youtube shortcode, with the video ID as a parameter.\nResult: the video player is embedded in the site:     Creating shortcodes You can create your own shortcodes. This procedure presents an example of creating a simple shortcode that changes the color of a fragment of text red and makes it bold.\n In the file explorer, navigate to {project folder}/themes/{theme name}/layouts/shortcodes In the shortcodes folder, create a new file named color.html The name should be meaningful. It is used to call the shortcode in the Markdown files. It cannot contain any spaces. Open the file. In the file, add the following code: \u0026lt;span style=\u0026quot;color:red\u0026quot;\u0026gt;\u0026lt;strong\u0026gt;{{ .Inner }}\u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt; Explanation: The shortcode takes a fragment of plain text included in the code that called it and encases it with HTML markup.\n Save the file. Try using the shortcode in practice.\nExample: The shortcode is used to color the text you are reading now.\n  For more information on creating shortcodes and the available functions and variables, refer to the Hugo documentation.\nRaw HTML You can include raw HTML markup in the Markdown files. This text is colored by using raw HTML.\nTo achieve the same result as in the shortcode created earlier, you can do this:\n\u0026lt;span style=\u0026quot;color:red\u0026quot;\u0026gt;\u0026lt;strong\u0026gt;You can include raw HTML markup in the Markdown files. This text is colored by using raw HTML.\u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt; NOTE: If the code does not work, you need to enable raw HTML in Hugo configuration.\nEnabling raw HTML  In the file explorer, open the project folder. Open the config.toml file. Add the following lines:  [markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true "});index.add({'id':6,'href':'/docs/deploy/deploy/','title':"Deploying the site",'content':"Site deployment Building the site To publish your content, you must first build a static site from the source files.\n If any changes you want to publish are in a working branch, merge that branch into the master branch. In the file explorer, open the project folder. Right-click in the file explorer (not on any file or folder) and select Open in Terminal. Check out the master branch by entering git checkout master. If the docs folder exists, delete it by using the file explorer.\nIMPORTANT: This does not apply to the content/docs/ folder. In the Terminal, enter hugo\nResult: The static site is built in the docs directory. Commit and push the changes to the origin/master branch. Perform one of the following actions:  If this is the first time you are deploying the site, proceed to publishing the site. If the site was published before, no further actions are required.\nTip: The site may take some time to update. To ensure that you are always browsing the latest version instead of a cached one, use the incognito/private browsing mode of your browser.    Publishing the site You only need to perform this procedure the first time you are deploying the site or after un-publishing.\n Log in to GitHub. Open the homepage of the repository. Select the Settings tab. In the menu on the left, ensure that you are in the Options page (open by default). Scroll down to the GitHub Pages section. In the Source drop-down list, select the master branch /docs folder option.\nResult: Publishing the site from the docs folder on the \u0026ldquo;master\u0026rdquo; branch begins. Depending on the size of the site, this may take some time.\nBy default, the URL of the page is https://{GitHub user name}.github.io{repository name}  "});index.add({'id':7,'href':'/docs/github/','title':"GitHub",'content':"GitHub GitHub is a cloud service for working with Git repositories.\n"});index.add({'id':8,'href':'/docs/github/account/','title':"GitHub account",'content':"GitHub account Creating a GitHub account A free GitHub account lets you access the basic features needed to deploy a personal site.\n Go to https://github.com/. Fill in the following fields:  Username Email Password   Click Sign up for GitHub. In the page that opens, perform the following actions:  Click Verify.\nA puzzle appears. Solve the puzzle according to the instructions on the screen. Click Join a free plan.\nResult: A page opens, asking for more information about your work profile.   Optional: Provide the additional information. Click Complete.\nResult: GitHub sends a verification email to the address you provided earlier. In the email, click Verify email address.\nResult: The verification page opens. If prompted, log in to GitHub.\nResult: Your account is verified. In the page that opens, perform one of the following actions:  Ignore the tutorials by clicking Skip this for now. Become familiar with the tutorial content.    Result: Your GitHub account is ready to use.\nAdding an SSH key to GitHub An SSH key is necessary to authorize Git requests sent from your local machine to GitHub.\n Open the Terminal by pressing CTRL + ALT + T. Check for existing keys by entering ls -al ~/.ssh Perform one of the following actions:  If the output says that the ~/.ssh directory does not exist, proceed to the next step. If the output lists any .pub files, but you do not want to use any of those keys with GitHub, proceed to the next step. If the output lists any .pub files and you want to use one of those keys with GitHub, skip to step 5.   Generate a new key by performing the following actions:  Enter $ ssh-keygen -t rsa -b 4096 -C \u0026quot;{your_email@example.com}\u0026quot;\nwhere {your_email@example.com} is the email address you used to create your GitHub account. When prompted to enter the file in which to save the key, perform one of the following actions:  To accept the default location, press ENTER. To change the location, enter the new location.   When prompted to enter a passphrase, perform one of the following actions:  To use a passphrase, enter and repeat the passphrase. To save the key without a passphrase, press ENTER.\nResult: The key is saved to a file.     Add your private key to the ssh-agent by performing the following actions:  Enter eval \u0026quot;$(ssh-agent -s)\u0026quot;\nResult: The ssh-agent starts running in the background. Enter ssh-add {path to private key file}\nTip: The default path is ~/.ssh/id_rsa\nExample: ssh-add ~/.ssh/id_rsa If prompted, enter the passphrase.   Copy the SSH key to the clipboard by performing the following actions:  Enter gedit \u0026lt;path to public key file\u0026gt;\nTip: The default path is ~/.ssh/id_rsa.pub From the text editor window that opens, copy all the contents into the clipboard. Close the text editor.   Log in to GitHub. Go to the profile settings page. In the menu on the left, click SSH and GPG keys. In the upper-right corner, click New SSH key. In the Title field, enter a meaningful name for the key.\nExample: John's personal laptop In the Key field, paste the public SSH key. Click Add SSH key. Enter your GitHub password.\nResult: The system is authorized to perform Git operations on your GitHub account.  "});index.add({'id':9,'href':'/docs/hugo/initialize/','title':"Initializing a site",'content':"Initializing a site Before you can add styling and content to a site, you must initialize a folder structure and configuration files.\n In the file explorer, create a folder for your project.\nNOTE: Whenever this page mentions project folder, it refers to this folder - until your local repository folder assumes the role of the project folder, as described in the GitHub section. Open the Terminal by pressing CTRL + ALT + T. Navigate to the project folder by using the cd command.\nExample: marcin@marcin-HP:~$ cd Documents/gitRepositories/myHugoSite  Enter hugo new site .\nResult: An empty site is created. To serve the site on your machine, perform the following steps:  Enter cd {project folder} Enter hugo server\nResult: By default, the site is available at http://localhost:1313/.\nInitially, the site has no content and you can only see a blank page. If another site is running locally under port 1313, Hugo automatically selects a different port. You can find the current address in the output of the hugo server command: ... Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:45353/ (bind address 127.0.0.1) Press Ctrl+C to stop ...  Return to the Terminal window and stop the local server by pressing CTRL + C.    "});index.add({'id':10,'href':'/docs/deploy/','title':"GitHub Pages",'content':"GitHub Pages Thanks to GitHub pages, you can deploy an organization, user, or project site in the github.io domain.\nThis section describes the deployment of a project page.\nIf you are using a free account, this feature is only available for public repositories.\n"});index.add({'id':11,'href':'/docs/github/repository/','title':"GitHub repository",'content':"GitHub repository After your content is uploaded to a GitHub repository, you can start versioning your source files and keeping a history of changes.\nBefore you continue, ensure that you installed Git.\nCreating a repository  Log in to GitHub. In the menu on the left, click New. In the Repository name field, enter a meaningful name.\nNOTE: If you host a project site from this repository, the name is part of the URL. Optional: In the Description field, enter a description. Make the repository public or private by selecting the corresponding radio button. Click Create repository.\nResult An empty repository is created. Open the Terminal by pressing CTRL + ALT + T. Navigate to the directory where you want to store the Git repository. Example:  marcin@marcin-HP:~$ cd Documents/gitRepositories Enter git clone git@github.com:{your GitHub username}/{your repository name}.git If prompted to add github.com to the list of known hosts, enter yes Result The repository is cloned into a new directory, named after the repository. You can now commit files from this location to GitHub.  Committing to the repository Your repository is empty. As your first commit, you can add the readme.md file.\n Open a text editor. Create a Markdown file with some content.\nExample: # Marcin's repository This is the repository for my personal GitHub site.  Save the file in the repository folder as readme.md Open the Terminal by pressing CTRL + ALT + T. Navigate to the repository folder by using the cd command.\nExample: cd Documents/repositories/myRepository To verify that you are in the correct folder and on the correct branch, enter git status\nExpected output: On branch master No commits yet Untracked files: (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to include in what will be committed) readme.md nothing added to commit but untracked files present (use \u0026quot;git add\u0026quot; to track)  Add (stage) the change in the readme.md file by entering add readme.md Verify that the file is staged by entering git status\nExpected output: On branch master No commits yet Changes to be committed: (use \u0026quot;git rm --cached \u0026lt;file\u0026gt;...\u0026quot; to unstage) new file: readme.md  Commit the changes by entering git commit --message=\u0026quot;My first commit\u0026quot;\nResult: The changes are committed. The output provides a summary of the changes and some additional information, such as the commit\u0026rsquo;s hashId. Push the changes to origin by entering git push Log in to GitHub and open your repository. Verify that the readme.md was added to the repository.  Moving your project folder to the repository Your repository is ready to use. It is time to upload your project folder to GitHub and start keeping track of your work.\n In the file explorer, open your project folder. Select all the files. Copy the files to clipboard. Open your repository folder. Paste the files from your clipboard. Right-click in the folder (not on any file or folder) and select Open in Terminal. In the terminal, enter git status\nExpected output: Depending on your previous work with the project folder, the list of files and folders may differ slightly. On branch master Your branch is up to date with 'origin/master'. Untracked files: (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to include in what will be committed) config.toml content/ resources/ themes/ nothing added to commit but untracked files present (use \u0026quot;git add\u0026quot; to track)  Add all files by entering git add * Commit the changes by entering git commit --message=\u0026quot;Uploaded the Hugo project\u0026quot; Push the changes to origin by entering git push Result: your project is uploaded to GitHub. From now on, when mentioning the project folder, this guide refers to the folder with the repository. The previous project folder is obsoleted.  Committing and pushing further changes When you make more changes to files, you should commit them in order to build a change history.\n Open the Terminal by pressing CTRL + ALT + T. Navigate to the repository folder by using the cd command.\nExample: cd Documents/repositories/myRepository Check for new, modified, or removed files by entering git status. If the output says that your local branch is a number of commits behind origin, enter git pull Stage all added files by entering git add * Stage all file modifications and deletions by entering git add -u Commit the changes by entering git commit --message=\u0026quot;{meaningful message}\u0026quot; Push the changes to origin by entering git push  Tip: To simplify your work with Git, install a Git plugin for your text editor or a standalone application such as SourceTree.\n"});index.add({'id':12,'href':'/docs/hugo/articles/review/','title':"Reviewing the output",'content':"Reviewing the output Before publishing your site to GitHub Pages, you should review the output locally. GitHub Pages do not provide an on-line staging environment and the static site pushed to \u0026ldquo;origin/master\u0026rdquo; is published immediately.\nHosting the preview  Open the Terminal by pressing CTRL + ALT + T. Navigate to the project folder. Enter hugo server.\nResult: The site is hosted locally on your system.\nBy default, the site is available at http://localhost:1313/. If another site is running locally under port 1313, Hugo automatically selects a different port. You can find the current address in the output of the hugo server command: Web Server is available at http://localhost:45353/ (bind address 127.0.0.1) Note: If you already completed configuration for GitHub pages, the localhost URL includes your repository name, for example http://localhost:1313/ssg/.\n To stop the local server, return to the Terminal and press CTRL + C.  Tip: After you add a few articles, start storing your work on GitHub and publish the site.\nReview considerations Markdown requires precise application of spaces and line breaks.\nWhen reviewing content, pay special attention to:\n code block formatting. list numbering issues. line breaks. line spacing (may be broken due to redundant line breaks) non-working links  IMPORTANT: Markdown preview plugins for text editors may show different output than Hugo does. Do not use them for final reviews.\nThe live preview served at localhost helps you to make corrections faster, but is not perfect. If you cannot see the changes you made, or the output is different than expected, you may need to restart the local preview.\n"});index.add({'id':13,'href':'/docs/hugo/themes/','title':"Themes",'content':"Themes To give your website a graphical layout, you must add a theme.\nYou can also create your own theme from scratch. This requires knowledge of HTML, CSS, JS, and Hugo templating.\nAdding a theme This procedure explains how to download a theme and use it without connection to the theme\u0026rsquo;s original repository. This allows you to easily introduce your own modifications or update the theme at your own pace.\nIMPORTANT: Before making any changes to a theme, verify that the license allows it and to what extent. License information is available on the theme\u0026rsquo;s homepage.\n Go to the Hugo themes site. From the list, select a theme. This page uses the book theme. Go the GitHub page of the theme\u0026rsquo;s repository. Click Clone or download. Click Download ZIP. Save the file to your local drive (not to your project folder). Extract the files. In your project folder, in the themes folder, create a folder named after the theme. Copy the extracted files into the theme folder you created. In the project folder, open the config.toml file. In the config.toml file, add the following line:  theme = \u0026quot;{theme folder name}\u0026quot; Example:\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot; theme = \u0026quot;book\u0026quot; Verify that the theme was added successfully:  Open the Terminal by pressing CTRL + ALT + T. Navigate to your repository.\nExample: cd Documents/myRepository Enter hugo server.\nResult: Your page is available locally as an empty site with no content. Some elements of the theme should be visible.    Theme-specific features Most themes provide custom shortcodes, partials, and configuration options. Information about those features is usually available on the theme\u0026rsquo;s homepage or its README.md file.\n"});index.add({'id':14,'href':'/docs/hugo/articles/','title':"Content",'content':"Content Hugo accepts a number of content formats. The content of this site is written in Markdown.\nMarkdown Markdown is a lightweight markup language. It is easy to learn and easy to use, but its capabilities are limited.\nUnlike reStructuredText or DITA, Markdown is not a standard. It has a number of flavors that differ in features and formatting (for example, some flavors use two spaces for indentation, while others may use four spaces).\nWhen writing in Markdown, adapt your formatting to the interpreter that you use for creating output.\nMarkdown documentation structure Markdown articles do not usually follow a topic-based approach. Creating separate files for concepts, tasks, and references would clutter the tables of content. Instead, articles cover entire subjects, and are organized internally using headings. An example of this approach is visible on this site: on the left side of the screen, the table of contents lists articles. On the right side of the screen, the table of contents lists the headings in the current article.\nYou can learn Markdown from this tutorial from GitHub.\nHugo uses an interpreter compliant with the same Markdown flavor that GitHub uses.\nContent organization The basic way to organize content in Hugo is by manipulating the directory structure. Within a directory, the articles are sorted alphabetically. You can arrange them using the weight metadata.\nDirectory structure By default, content is stored in the content folder in your repository. Themes may require various layouts for the files in that folder. For example, the \u0026ldquo;book\u0026rdquo; theme, used to generate this site, requires the content to be placed in the content/docs folder.\nWhen you add content files, their position in the directory structure affects their position in the table of contents.\nThis example shows a part of this site\u0026rsquo;s directory structure:\n. └── content └── docs └── hugo _index.md initialize.md install.md themes.md articles └── _index.md //this is the article you are reading now add.md review.md └── github ... ... In the content/docs/hugo/articles folder, the _index.md file is the main article of the section. In the table of contents, it is the \u0026ldquo;parent\u0026rdquo; of the other articles inside the folder.\nIn the Hugo documentation, this is called a page bundle or a section. A page bundle consists of the section page (_index.md) and a number of pages included in that section.\nSections can also include other sections. For example, in the example above, the article you are reading now is a part of another page bundle. The index page of the larger page bundle is this article.\nNOTE: the index file must be named _index.md, including the underscore. Without the underscore, the page becomes a *leaf bundle. Leaf bundles cannot include other pages or sections, but they are located in their own folders and can be used to store resources, such as images or data files, closer to the Markdown sources.\nFor more details, see the Hugo documentation.\nArticle weight The weight metadata is explained here.\nArticle front matter and metadata The metadata is included in the front matter. The front matter is a block of YAML-formatted data at the beginning of a Markdown file. This block starts and ends with three hyphens (---).\nFront matter can also be written in other formats, not covered by this article:\n TOML JSON ORG  Front matter example: the first lines of this article\u0026rsquo;s source file:\n--- title: \u0026quot;Content\u0026quot; weight: 20 description: \u0026quot;Learn to manage content structures in Hugo\u0026quot; --- # Content Hugo accepts a number of content formats. The content of this site is written in Markdown. The two main purposes of metadata are:\n Providing information to Hugo when generating a site. Providing information to search engines.  Hugo does not treat any metadata as obligatory. Inserting an empty front matter or omitting it entirely does not normally cause a build error. However, it is good practice to add at least a title and a description.\nYou can add custom metadata:\n--- title: \u0026quot;Content\u0026quot; weight: 20 description: \u0026quot;Short description\u0026quot; customParam: \u0026quot;string\u0026quot; customArrayParam: - \u0026quot;string\u0026quot; - \u0026quot;string\u0026quot; --- This can be useful for creating custom shortcodes and partials. For example, you can create a shortcode that uses thr icomingLinks and outgoingLinks metadata to build complex relationship maps between articles.\nTitle Visible in the table of contents, the title of the browser tab, and to search engines.\nDescription Visible to search engines and in some tables of contents, depending on the theme.\nIf this metadata is not provided, some themes automatically generate a description from a page\u0026rsquo;s .Summary variable, which is the first 70 words of the content. This may result in raw HTML being included in the description if you do not provide one.\nWeight Used to arrange the order of articles in the table of contents. Articles with the lowest weight are displayed first.\nWeight works in the scope of a single section and does not affect sub-sections.\nExample:\nIn the table of contents in the screenshot, the weight of \u0026ldquo;Initializing a site\u0026rdquo;:\n does not interact in any way with the weight of \u0026ldquo;Adding content\u0026rdquo; or \u0026ldquo;GitHub account\u0026rdquo;. interacts with the weight of \u0026ldquo;Installing Hugo\u0026rdquo;, \u0026ldquo;Themes\u0026rdquo;, and \u0026ldquo;Content\u0026rdquo;.  TIP: When adding weight to articles, do not increment the value by 1. Use a larger value, such as 5 or 10. Thanks to this, when you add an article in the future, you will not need to modify the weight of other articles in the section.\nExample.\n \u0026ldquo;Article A\u0026rdquo; has a weight of 5. \u0026ldquo;Article B\u0026rdquo; has a weight of 10. A month later, \u0026ldquo;Article C\u0026rdquo; is added. The weight is set to 8.  In result, \u0026ldquo;Article C\u0026rdquo; is placed in the table of contents between A and B without any further modifications.\nIf A had a weight of 1 and B had a weight of 2, you would have to change the weight of B to 3. In a structure with more articles, this would generate unnecessary workload.\n"});index.add({'id':15,'href':'/docs/deploy/troubleshooting/','title':"Troubleshooting GitHub Pages",'content':"Troubleshooting GitHub Pages This is a list of issues which I encountered when deploying this site to GitHub pages.\nThe solutions may not be the most effective or the only possible ones.\nProblem: styling is not applied to the site Solution:\nVerify that your config file includes these lines:\ncanonifyURLs = true baseURL = \u0026quot;https://{your GitHub username}.github.io/{your repository name}/\u0026quot; Problem: relative links to articles do not work Solution:\nVerify that your config file includes these lines:\ncanonifyURLs = true baseURL = \u0026quot;https://{your GitHub username}.github.io/{your repository name}/\u0026quot; Problem: images are not displayed Solution:\n Verify that your config file includes these lines: canonifyURLs = true baseURL = \u0026quot;https://{your GitHub username}.github.io/{your repository name}/\u0026quot;  Store the images in a designated folder inside the content folder, next to the folder or folders where you store your Markdown sources. Use absolute linking to images.\nExample: ![A fragment of a table of contents](/images/weightexample.png)   "});index.add({'id':16,'href':'/docs/','title':"Docs",'content':""});})();